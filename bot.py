import math
import re
from datetime import datetime, timezone
import telebot
from telebot import types
from telebot.types import Message

import db
import admin
import reg
from preparation import LocalCache
import answer
import config
from answer import Answers

lc = LocalCache()
answ = Answers()

bot = telebot.TeleBot(config.API_TOKEN)


def get_faculty_list(event_id, tg_chat_id):
    """
    –§—É–Ω–∫—Ü–∏—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ —É—á–∞–≤—Å—Ç–≤—É—é—Ç –≤ —Ç–µ–∫—É—â–µ–º –≥–æ–ª–æ—Å–≤–∞–Ω–∏–∏

    –≤—ã–≤–æ–¥–∏–º —Ç–∞–±–ª–∏—Ü—É —Å –≥–æ–ª–æ—Å–∞–º–∏, –≤ –∫–æ—Ç–æ—Ä–æ–π —á–∞—Ç —Ç–µ–ª–µ–≥—Ä–∞–º–∞ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å —Ç–µ–º, –∫—Ç–æ –Ω–∞–º –Ω–∞–ø–∏—Å–∞–ª,
    id —ç–≤–µ–Ω—Ç–∞ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å —Ç–µ–∫—É—â–∏–º,
    """
    query = """SELECT DISTINCT faculties.id, faculties.name FROM facultyList
JOIN events ON events.list = facultyList.listID
JOIN faculties ON faculties.id = facultyList.facultyID
LEFT JOIN votes ON votes.faculty_id = facultyList.facultyID AND votes.event_id = events.id
WHERE events.id = {event_id}
EXCEPT
SELECT DISTINCT faculties.id, faculties.name FROM facultyList
JOIN faculties ON faculties.id = facultyList.facultyID
LEFT JOIN votes ON votes.faculty_id = facultyList.facultyID
WHERE votes.event_id = {event_id} AND votes.telegram_chat_id = {tg_chat_id}
EXCEPT
SELECT DISTINCT faculties.id, faculties.name FROM users
JOIN faculties ON users.faculty_id = faculties.id
WHERE tg_chat_id = {tg_chat_id}""".format(event_id=event_id, tg_chat_id=tg_chat_id)
    result = db.execute_read_query(query)
    return result


def get_faculty_keyboard(event_id, tg_chat_id, row_width=3):
    """
    –§—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–æ—Å—Ç–æ—è—à—É—é –∏–∑ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–æ–≤, —á—Ç–æ–±—ã —Å—Ä–∞–∑—É –≤—ã—Å—Ä–∞—Ç—å –µ—ë –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    :param event_id:
    :param tg_chat_id:
    :param row_width: —à–∏—Ä–∏–Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é "3"
    :return:
    """
    markup = types.InlineKeyboardMarkup(row_width=row_width)

    # –≤—ã–≤–æ–∂—É –∫–Ω–æ–ø–∫–∏ —Å —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–∞–º–∏, –µ—Å–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ–ª–æ—Å–æ–≤ –Ω–µ –∏—Å—á–µ—Ä–ø–∞–Ω–æ
    num_voting_records = lc.get_num_voting_records(tg_chat_id)
    num_voting_left = lc.get_num_voting_left(tg_chat_id)
    if num_voting_left > 0:
        faculties = get_faculty_list(event_id, tg_chat_id)
        for i in range(0, math.ceil(len(faculties) / row_width) + 1):
            row = [types.InlineKeyboardButton(item[1], callback_data="{}__{}".format(event_id, item[0])) for item in
                   faculties[i * row_width:i * row_width + row_width]]
            markup.add(*row)
    if num_voting_records > 0:
        del_button = types.InlineKeyboardButton("–û—Ç–º–µ–Ω–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–π –≤—ã–±–æ—Ä", callback_data="del__{}".format(event_id))
        markup.add(del_button)
        conf_button = types.InlineKeyboardButton("–ó–∞–≤–µ—Ä—à–∏—Ç—å –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ", callback_data="conf__{}".format(event_id))
        markup.add(conf_button)



    return markup


def get_voted_list(event_id, tg_chat_id):
    query = """SELECT faculties.name FROM votes
JOIN faculties ON faculties.id=votes.faculty_id
WHERE votes.telegram_chat_id = {tg_chat_id} AND votes.event_id={event_id};""".format(tg_chat_id=tg_chat_id,
                                                                                     event_id=event_id)
    raw_result = db.execute_read_query(query)
    result = []
    for item in raw_result:
        result.append(item[0])
    return result


def get_num_voting_left(event_id, voted_list):
    return lc.get_amount_voting() - len(voted_list)


def get_vote_message_text(event_id, tg_chat_id):

    voting_left = ''
    if lc.get_num_voting_records(tg_chat_id) == 0:
        voting_left = '–í—ã –µ—â—ë –Ω–∏ –∑–∞ –∫–æ–≥–æ –Ω–µ –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª–∏.'
    else:
        voted_list_str = ""
        for faculty_id in lc.all_vote_list[str(tg_chat_id)]:
            voted_list_str += "üîò {}\n".format(lc.get_faculty_from_id_global(faculty_id))

        num_voting_left = lc.get_num_voting_left(tg_chat_id)
        ololol = {
            1: '—Ñ–∞–∫—É–ª—å—Ç–µ—Ç',
            2: '—Ñ–∞–∫—É–ª—å—Ç–µ—Ç–∞',
            3: '—Ñ–∞–∫—É–ª—å—Ç–µ—Ç–∞',
            4: '—Ñ–∞–∫—É–ª—å—Ç–µ—Ç–∞'
        }
        try:
            faculty_str = ololol[num_voting_left]
        except KeyError as e:
            faculty_str = '—Ñ–∞–∫—É–ª—å—Ç–µ—Ç–æ–≤'

        if not num_voting_left == 0:
            voting_left = '–û—Å—Ç–∞–ª–æ—Å—å –≤—ã–±—Ä–∞—Ç—å {num_voting_left} {faculty_str}\n\n'.format(num_voting_left=num_voting_left,
                                                                                        faculty_str=faculty_str)
        else:
            voting_left = "–ó–∞–≤–µ—Ä—à–∏—Ç–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ!\n\n"
        voting_left += ('–£—á—Ç—ë–Ω—ã –≥–æ–ª–æ—Å–∞ –∑–∞ —Å–ª–µ–¥—É—é—â–∏–µ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç—ã:\n'
                        '{voted_list_str}'.format(voted_list_str=voted_list_str))

    text = ('–í—ã–±–µ—Ä–∏ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ —Ç–µ–±–µ –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ –ø–æ–Ω—Ä–∞–≤–∏–ª–∏—Å—å!\n\n'
            '{voting_left}'.format(voting_left=voting_left))
    return text


def edit_vote_message(event_id, call, keyboard_width):
    markup = get_faculty_keyboard(event_id, call.from_user.id, keyboard_width)
    text = get_vote_message_text(event_id, call.from_user.id)
    bot.edit_message_text(text, call.from_user.id, call.message.id, reply_markup=markup)


# Handle '/start' and '/help' and '/reset'
@bot.message_handler(commands=['help', 'start', 'reset'])
def send_welcome(message):
    bot.send_message(message.chat.id, answ.start_text, reply_markup=answ.start_button())
    if str(message.chat.id) in lc.admins:
        db.execute_query(
            "DELETE FROM votes WHERE telegram_chat_id='{}' AND event_id='{}'".format(message.chat.id, lc.event_id))
        db.execute_query("DELETE FROM users WHERE tg_chat_id='{}'".format(message.chat.id))
        db.execute_query(
            "DELETE FROM finished_voting WHERE tg_chat_id='{}' AND event_id='{}'".format(message.chat.id, lc.event_id))


@bot.message_handler(commands=['resetlc'])
def resetlc_handler(message):
    if str(message.chat.id) in lc.admins:
        lc.reset()
        bot.send_message(message.chat.id, answ.start_text, reply_markup=answ.start_button())
    else:
        bot.send_message(message.chat.id, "–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –Ω–µ –¥–ª—è —Ç–µ–±—è", reply_markup=answ.start_button())


# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Å—Ç—É–¥–µ–Ω—Ç–æ–≤, –ö–ò–û—à–Ω–∏–∫–æ–≤ –∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
def register_handler_student(message):
    id = reg.get_faculty_by_group(message.text)

    if id == 0:
        bot.send_message(message.chat.id, "–ù–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã –≤–≤–µ–¥—ë–Ω –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. –ù—É–∂–Ω–æ –ø–∏—Å–∞—Ç—å –≤ —Ç–æ—á–Ω–æ—Å—Ç–∏ –∫–∞–∫ –≤ timetable.",
                         reply_markup=types.ReplyKeyboardRemove())
        bot.register_next_step_handler(message, register_handler_student)
        return
    # –µ—Å–ª–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫
    elif id == 31:
        # –ø–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –¥—Ä—É–≥–æ–π —Å—Ç–µ–ø –≥–¥–µ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º stXXXXXX
        markup = types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
        markup.add(types.KeyboardButton('‚è™ –û—Ç–º–µ–Ω–∞'))
        bot.send_message(message.chat.id, answ.need_registartion_empl, reply_markup=markup,
                         parse_mode="MarkdownV2")
        bot.register_next_step_handler(message, register_handler_student_empl)
        return
    # –µ—Å–ª–∏ –ö–ò–û
    elif id == 20:
        markup = types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
        markup.add(types.KeyboardButton('‚è™ Cancel'))
        bot.send_message(message.chat.id, answ.need_registartion_eng, reply_markup=markup,
                         parse_mode="MarkdownV2")
        bot.register_next_step_handler(message, register_handler_student_kio)
        return

    print("{} --- {} id:{} {} {} {}".format(message.text, lc.get_faculty_from_id_global(id), id, message.chat.username,
                                            message.chat.first_name, message.chat.last_name))
    bot.send_message(message.chat.id, "–ü–æ–∑–¥—Ä–∞–≤–ª—è—é, —Ç—ã —Å–ø—Ä–∞–≤–∏–ª—Å—è —Å –≤–≤–æ–¥–æ–º –Ω–æ–º–µ—Ä–∞ –≥—Ä—É–ø–ø—ã. –ñ–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É",
                     reply_markup=answ.start_button(), parse_mode="Markdown")
    reg.write_register_info(message.chat.id, id, message.text)


def register_handler_student_kio(message):
    id = reg.get_faculty_by_group(message.text)
    if id == 0:
        bot.send_message(message.chat.id, "–ù–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã –≤–≤–µ–¥—ë–Ω –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. –ù—É–∂–Ω–æ –ø–∏—Å–∞—Ç—å –≤ —Ç–æ—á–Ω–æ—Å—Ç–∏ –∫–∞–∫ –≤ timetable.",
                         reply_markup=types.ReplyKeyboardRemove())
        bot.register_next_step_handler(message, register_handler_student_kio)
        return
    # –µ—Å–ª–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫
    elif id == 31:
        bot.send_message(message.chat.id, "–ê —Ç—ã –º–µ–ª–∫–∏–∫ –ø—Ä–æ–∫–∞–∑–Ω–∏–∫. —Ç–∞–∫ –Ω–µ–ª—å–∑—è!", reply_markup=answ.start_button())
        return
    # –µ—Å–ª–∏ –ö–ò–û
    elif id == 20:
        bot.send_message(message.chat.id, answ.need_registartion_eng, reply_markup=types.ReplyKeyboardRemove())
        bot.register_next_step_handler(message, register_handler_student_kio)
        return
    # –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª–æ
    elif id == -1:
        reg.back_to_start(message, bot)
        bot.register_next_step_handler(message, register_handler_student)
        return
    print("{} --- {} + –ö–ò–û id:{} {} {} {}".format(message.text, lc.get_faculty_from_id_global(id), id,
                                                  message.from_user.username, message.chat.first_name,
                                                  message.chat.last_name))
    bot.send_message(message.chat.id,
                     "–ü–æ–∑–¥—Ä–∞–≤–ª—è—é, —Ç—ã —Å–ø—Ä–∞–≤–∏–ª—Å—è —Å –≤–≤–æ–¥–æ–º –Ω–æ–º–µ—Ä–∞ –≥—Ä—É–ø–ø—ã. –ñ–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É".format(
                         lc.get_faculty_from_id_global(id)), reply_markup=answ.start_button(), parse_mode="Markdown")
    reg.write_register_info(message.chat.id, id, message.text)
    reg.write_register_info(message.chat.id, 20, message.text)


def register_handler_student_empl(message):
    if message.text == '‚è™ –û—Ç–º–µ–Ω–∞':
        reg.back_to_start(message, bot)
        bot.register_next_step_handler(message, register_handler_student)
        return
    print("–°–æ—Ç—Ä—É–¥–Ω–∏–∫ --- {} {} {}".format(message.chat.username, message.chat.first_name, message.chat.last_name))
    bot.send_message(message.chat.id, "–£—Ä–∞, –º–æ–∂–Ω–æ –ø–µ—Ä–µ–π—Ç–∏ –∫ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—é\. –ñ–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É",
                     reply_markup=answ.start_button(), parse_mode="MarkdownV2")
    reg.write_register_info(message.chat.id, 31, message.text)


def all_inspections(event_id, tg_chat_id):
    # –ø—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –¥–µ–π—Å—Ç–≤—É—é—â–µ–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ
    if event_id is None:
        bot.send_message(tg_chat_id, answ.event_closed, reply_markup=answ.start_button())
        return False
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª –ª–∏ —á–µ–ª–æ–≤–µ–∫ –≤ —ç—Ç–æ–º —ç–≤–µ–Ω—Ç–µ. –ï—Å–ª–∏ –¥–∞, —Ç–æ –±–ª–∞–≥–æ–¥–∞—Ä–∏–º –ø–æ—Å—ã–ª–∞–µ–º
    if lc.check_finish_voting(tg_chat_id):
        bot.send_message(tg_chat_id, "–í—ã —É–∂–µ –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª–∏, –≤–∞—à –≤—ã–±–æ—Ä –∑–∞–ø–∏—Å–∞–Ω.",
                         reply_markup=answ.start_button())
        return False
    return True


# # Handle all other messages with content_type 'text' (content_types defaults to ['text'])
@bot.message_handler(func=lambda message: True)
def start(message: Message):
    if message.text == "\U0001f7e2 –ì–æ–ª–æ—Å–æ–≤–∞—Ç—å!":
        if not reg.is_registered(message.chat.id):
            reg.back_to_start(message, bot)
            bot.register_next_step_handler(message, register_handler_student)
            return

        event_id = lc.check_current_event()
        # –¥–µ–ª–∞–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —ç–≤–µ–Ω—Ç–∞, –Ω–µ–∑–∞–≤–µ—Ä—à—ë–Ω–Ω–æ—Å—Ç—å –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
        if not all_inspections(event_id, message.chat.id):
            return

        # —Å–æ–∑–¥–∞—ë–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        row_width = 3
        markup = get_faculty_keyboard(event_id, message.chat.id, row_width)
        text = get_vote_message_text(event_id, message.chat.id)

        s = bot.send_message(message.chat.id, text, reply_markup=markup, parse_mode="Markdown")


# –µ—Å–ª–∏ –Ω–∞–∂–∞–ª–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
@bot.callback_query_handler(func=lambda call: re.match(r'^[0-9]+__[0-9]+$', call.data) is not None)
def callback_query(call):
    event_id = lc.check_current_event()
    split_data = call.data.split('__')
    call_event_id = split_data[0]
    call_faculty_id = split_data[1]
    if not all_inspections(event_id, call.from_user.id) or not event_id == int(call_event_id):
        bot.answer_callback_query(call.id, answ.error)
        return


    check_vote = lc.take_a_vote(call.from_user.id, call_faculty_id,
                             "{} {}".format(call.from_user.first_name, call.from_user.last_name),
                             call.from_user.username, call_event_id)
    if check_vote:
        bot.answer_callback_query(call.id, "‚úÖ {}".format(lc.get_faculty_from_id(call_faculty_id)))
        print("@{username} –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª –∑–∞ {data} {first_name} {last_name} id:{id}".format(
            data=lc.get_faculty_from_id(call_faculty_id),
            username=call.from_user.username,
            first_name=call.from_user.first_name,
            last_name=call.from_user.last_name,
            id=call.from_user.id))
    else:
        bot.answer_callback_query(call.id, answ.error)
        return
    edit_vote_message(call_event_id, call, 3)


@bot.callback_query_handler(func=lambda call: re.match(r'^conf__[0-9]+$', call.data) is not None)
def confirmation(call):
    split_data = call.data.split('__')
    call_event_id = split_data[1]
    event_id = lc.check_current_event()
    if not all_inspections(event_id, call.from_user.id) or not event_id == int(call_event_id):
        bot.answer_callback_query(call.id, answ.error)
        return
    if not str(call_event_id) == str(lc.event_id):
        bot.answer_callback_query(call.id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
        return
    if lc.get_num_voting_records(call.from_user.id) == 0:
        bot.answer_callback_query(call.id, "‚ùå –ü—Ä–æ–≥–æ–ª–æ—Å—É–π –∑–∞ –∫–æ–≥–æ-–Ω–∏–±—É–¥—å")
        return


    if lc.confirm_vote(call.from_user.id):
        bot.answer_callback_query(call.id, "‚úÖ –í–∞—à–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ (–Ω–µ—Ç)")
        bot.send_message(call.from_user.id, "–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª–∏ \n\n–ê –ø–æ–∫–∞ –º—ã —Å—á–∏—Ç–∞–µ–º –≤—Å–µ –≥–æ–ª–æ—Å–∞, –º–æ–∂–µ—Ç–µ –∏–∑—É—á–∏—Ç—å —Å–∞–π—Ç –Ω–∞—à–µ–≥–æ —Å–ø–æ–Ω—Å–æ—Ä–∞ example.com", reply_markup=answ.start_button())
    else:
        bot.answer_callback_query(call.id, "‚ùå –ü–æ–≤—Ç–æ—Ä–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–µ–ª—å–∑—è")
    bot.delete_message(call.from_user.id, call.message.id)



@bot.callback_query_handler(func=lambda call: re.match(r'^del__[0-9]+$', call.data) is not None)
def delete_last(call):
    split_data = call.data.split('__')
    call_event_id = split_data[1]
    event_id = lc.check_current_event()
    if not all_inspections(event_id, call.from_user.id) or not event_id == int(call_event_id):
        bot.answer_callback_query(call.id, answ.error)
        return
    if not str(call_event_id) == str(lc.event_id):
        bot.answer_callback_query(call.id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
        return
    if lc.delete_last_vote(call.from_user.id):
        bot.answer_callback_query(call.id, "–£–¥–∞–ª—ë–Ω –ø–æ—Å–ª–µ–¥–Ω–∏–π –≤–∞—Ä–∏–∞–Ω—Ç")
        edit_vote_message(call_event_id, call, 3)
    else:
        bot.answer_callback_query(call.id, "–ù–µ —É–¥–∞–ª–∏–ª–æ—Å—å")
    # bot.answer_callback_query(call.id, "üò¢ –ü–æ–∫–∞ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç üò¢")
    # edit_vote_message(call_event_id, call, 3)


# Enable saving next step handlers to file "./.handlers-saves/step.save".
# Delay=2 means that after any change in next step handlers (e.g. calling register_next_step_handler())
# saving will hapen after delay 2 seconds.
bot.enable_save_next_step_handlers(delay=2)

# Load next_step_handlers from save file (default "./.handlers-saves/step.save")
# WARNING It will work only if enable_save_next_step_handlers was called!
bot.load_next_step_handlers()

bot.infinity_polling()
